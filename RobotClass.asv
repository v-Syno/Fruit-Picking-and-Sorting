%% RobotClass
classdef RobotClass
    % Class for Robot functions

    methods (Static)

        function qGoal = MoveObject(robot, pose, steps, object, vertices, pickUp)
            % MoveObject2 Moves a robot to a specified pose
            % 
            % Inputs:
            %   - robot: The robot model.
            %   - pose: Desired end-effector pose
            %   - steps: Number of steps for the trajectory.
            %   - object: The graphical object to update.
            %   - vertices: Vertices of the object.
            %   - pickUp: Boolean indicating if the robot is holding the object.
            %
            % Outputs:
            %   - qGoal: Final joint configuration.
            
        
            q0 = robot.model.getpos(); % Get current joint poses
            T_EE = transl(pose)* trotx(pi); % Using the provided end-effector pose
            qGoal = robot.model.ikcon(T_EE, q0); % Compute joint configuration for the goal
        
            qMatrix = jtraj(q0,qGoal,steps);

            % Execute the motion
            for i = 1:steps
                robot.model.animate(qMatrix(i, :));
        
                if pickUp
                    % Update the object's vertices to reflect its transformation
                    updated_transform = robot.model.fkineUTS(qMatrix(i, :));
                    updated_vertices = [vertices, ones(size(vertices, 1), 1)] * updated_transform';
                    set(object, 'Vertices', updated_vertices(:, 1:3));
                end
                drawnow();
            end
        
            qGoal = qMatrix(end, :);
        end

        function qGoal = MoveRobot(robot, pose, steps, payload, vertices, holdingObject, endEffDirection,g1,g2)
            % Setup the end-effector transformation based on the direction.
            switch lower(endEffDirection)
                case 'forward'
                    T_EE = transl(pose) * trotx(-pi/2);
                case 'backwards'
                    T_EE = transl(pose) * trotx(pi/2);
                case 'down'
                    T_EE = transl(pose) * trotx(pi);
                case 'up'
                    T_EE = transl(pose);
                otherwise
                    error('Invalid end-effector direction');
            end
        
            % Get initial and goal joint configurations.
            q0 = robot.model.getpos();
            qGoal = robot.model.ikcon(T_EE, q0);
            
            % Generate a smoother joint trajectory using `jtraj`.
            qMatrix = jtraj(q0, qGoal, steps);
            
            % Initialize collision and object functions.
            collF = CollisionClass();
            object = ObjectClass();

            i = 1;
            sidesteps = 30;
        
            % Iterate through the trajectory steps.
            while i <= steps
                if i < 5
                    disp('giving time to move')
                    drawnow();
                    i = i+1;
                    continue
                end
                % Check for collisions.
                groundCheck = collF.collisionGroundLPI(robot);
                selfCheck = collF.collisionCheckSelf(robot, qMatrix(i, :));
                
                % If a collision is detected, adjust the path.
                if groundCheck == 1 || selfCheck
                    disp('Potential collision! Adjusting path...');
                    qMatrix = collF.adjustPath(robot, qMatrix, i, sidesteps, qGoal, groundCheck);
                    i = 1; % Restart the loop with the new path.
                    continue;
                end

                % Gripper base transform for UR3.
                pos1 = robot.model.fkineUTS(robot.model.getpos())*transl(0,-0.0127,0.05)*troty(-pi/2);%z0.0612
                pos2 = robot.model.fkineUTS(robot.model.getpos())*transl(0,0.0127,0.05)*troty(-pi/2);%z0.0612

                g1.model.base = pos1; 
                g2.model.base = pos2; 
                g1.model.animate(g1.model.getpos());
                g2.model.animate(g2.model.getpos());

        
                % Animate the robot.
                robot.model.animate(qMatrix(i, :));
                
                % Update object position if holding.
                if holdingObject
                    object.UpdateObjectPosition(robot, qMatrix(i, :), payload, vertices);
                end
        
                drawnow();
                i = i + 1;
            end
        end

        function GripperMove(right, left, state)
            % Controls the opening or closing of the gripper.
            steps = 50; % Number of steps for smoother transition.
            
            % Define angles for open/closed states.
            leftQopen = [deg2rad(-20), deg2rad(20), 0];
            rightQopen = [deg2rad(20), deg2rad(-20), 0];
            leftQclosed = [deg2rad(-30), deg2rad(30), 0];
            rightQclosed = [deg2rad(30), deg2rad(-30), 0];
        
            if strcmp(state, 'close')
                qPath1 = jtraj(rightQopen, rightQclosed, steps);
                qPath2 = jtraj(leftQopen, leftQclosed, steps);
            elseif strcmp(state, 'open')
                qPath1 = jtraj(rightQclosed, rightQopen, steps);
                qPath2 = jtraj(leftQclosed, leftQopen, steps);
            end
        
            % Animate the gripper.
            for i = 1:steps
                right.model.animate(qPath1(i, :));
                left.model.animate(qPath2(i, :));
                drawnow();
            end
        end
    end
end